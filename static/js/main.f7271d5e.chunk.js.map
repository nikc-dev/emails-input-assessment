{"version":3,"sources":["atoms/email-chips/index.js","molecules/emails-input-component/index.js","atoms/button/index.js","organisms/page-component/index.js","App.js","index.js"],"names":["blockName","EmailChips","props","className","email","isInValid","emailId","onClick","removeEmail","id","EmailsInput","useState","value","setValue","document","getElementById","focus","emailsToRender","map","i","key","onKeyDown","e","target","includes","test","trim","updateEmailsList","autoComplete","type","name","onChange","onPaste","pastedEmails","clipboardData","getData","match","updatePastedEmails","window","setTimeout","placeholder","Button","handleClick","extraClass","title","Page","state","emailsList","addRandomEmail","setState","Math","random","toString","substring","emails","filter","showAlert","alert","length","this","Component","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f7271d5e.chunk.js","sourcesContent":["import React from 'react'\r\nimport './email-chips.scss'\r\n\r\nconst blockName = 'emailChips'\r\n\r\nexport default function EmailChips(props) {\r\n\r\n    // Triggers a function at parent to remove the selected email\r\n    let removeEmail = () => {\r\n        props.removeEmail(props.email.emailId);\r\n    }\r\n    return (\r\n        <span className={props.email.isInValid ? `${blockName}__invalid-email` : blockName}>\r\n            {props.email.emailId}\r\n            <span onClick={removeEmail} id={`${blockName}__remove-btn`} className={`${blockName}__remove-btn`} >X</span>\r\n        </span>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport EmailChips from '../../atoms/email-chips'\r\nimport './emails-input.scss'\r\n\r\nconst blockName = 'emailsInput'\r\nexport default function EmailsInput (props) {\r\n\r\n    // Using React Hooks to add default state to Input Value\r\n    const [value, setValue] = useState('');\r\n\r\n    //Renders the Email Chips if there is a list available\r\n    let renderEmails = () => {\r\n        return (\r\n            props.emailsToRender && props.emailsToRender.map((email, i) => <EmailChips key={i} email={email} removeEmail={props.removeEmail} />)\r\n        )\r\n    }\r\n\r\n    // Focus the invisible input field on clicking anywhere on the component\r\n    let focusInput = () => {\r\n        document.getElementById(`${blockName}__emai-input`).focus();\r\n    }\r\n\r\n    // Handles KeyDown and checks for Enter, Tab, Comma to execute the logic\r\n    let handleKeyPressDown = e => {\r\n        if (e.target.value && ['Enter', 'Tab', ','].includes(e.key)) {\r\n            const { value } = e.target\r\n            let email;\r\n            if (/[\\w\\d.-]+@[\\w\\d.-]+\\.[\\w\\d.-]+/.test(value.trim())) {\r\n                email = {emailId: value.trim()}\r\n            } else {\r\n                email = {emailId: value.trim(), isInValid: true}\r\n            }\r\n            props.updateEmailsList(email);\r\n            setValue('')\r\n        }\r\n    }\r\n\r\n    // Handles the paste on input box using ctrl + v , right click + paste\r\n    let handlePasteEmails = e => {\r\n        let pastedEmails = e.clipboardData.getData('text').match(/[\\w\\d.-]+@[\\w\\d.-]+\\.[\\w\\d.-]+/g);\r\n        pastedEmails && props.updatePastedEmails(pastedEmails.map(email => ({'emailId': email})));\r\n        window.setTimeout(function() {\r\n            setValue('')\r\n          }, 0);\r\n    }\r\n\r\n    // Listens to input change and updates the value\r\n    let handleChange = e => {\r\n        setValue(e.target.value)\r\n    }\r\n\r\n        return (\r\n            <div onClick={focusInput} id={blockName} className={blockName}>\r\n                {renderEmails()}\r\n                <input \r\n                    className={`${blockName}__input`} \r\n                    onKeyDown={handleKeyPressDown} \r\n                    autoComplete='off' \r\n                    type='email'\r\n                    value={value}\r\n                    id={`${blockName}__emai-input`} \r\n                    name='email'\r\n                    onChange={handleChange}\r\n                    onPaste={handlePasteEmails}\r\n                    placeholder=\"Add people...\" \r\n                />\r\n            </div>\r\n        )\r\n}\r\n","import React from 'react'\r\nimport './button.scss'\r\n\r\nconst blockName = 'button'\r\nexport default function Button(props) {\r\n\r\n    // A simple reusable button\r\n    return (\r\n        <button onClick={props.handleClick} className={`${blockName} ${props.extraClass}_${blockName}`}>\r\n            {props.title}\r\n        </button>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\nimport EmailsInput from '../../molecules/emails-input-component'\r\nimport Button from '../../atoms/button'\r\nimport './page.scss'\r\n\r\nconst blockName = 'page'\r\n\r\nexport default class Page extends Component {\r\n\r\n    state = {\r\n        emailsList: []\r\n    }\r\n\r\n    // Randomly adds an email to the list of email in\r\n    addRandomEmail = () =>  {\r\n        this.setState({emailsList: [...this.state.emailsList, {emailId: `${Math.random().toString(36).substring(7)}@random.com`}]})\r\n    }\r\n\r\n    // Update the emails list in state from the entered email in input\r\n    updateEmailsList = (email) => {\r\n        this.setState({emailsList:[...this.state.emailsList, email]});\r\n    }\r\n\r\n    updatePastedEmails = (emails) => {\r\n        this.setState({emailsList:[...this.state.emailsList, ...emails]})\r\n    }\r\n\r\n    // Removes the email from the list in State Object\r\n    removeEmail = (emailId) => {\r\n        this.setState({emailsList: this.state.emailsList.filter(email => email.emailId !== emailId)})\r\n    }\r\n\r\n    // Shows an alert box with the total valid emails count\r\n    showAlert = () => {\r\n        alert(`Number of Valid Emails in the List : ${this.state.emailsList.filter(email => email.isInValid !== true).length}`)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={blockName}>\r\n                <div className={`${blockName}__grey-container`}>\r\n                    <p className={`${blockName}__heading-text`}>Share <span className={`${blockName}__heading-text__bold`}>Project name </span>with others</p>\r\n                    <EmailsInput emailsToRender={this.state.emailsList} updateEmailsList={this.updateEmailsList} updatePastedEmails={this.updatePastedEmails} removeEmail={this.removeEmail} />\r\n                </div>\r\n                <div className={`${blockName}__btn-container`}>\r\n                    <Button handleClick={this.addRandomEmail} title={'Add Email'} />\r\n                    <Button handleClick={this.showAlert} title={'Get emails count'}/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React  from 'react';\nimport Page from '../src/organisms/page-component'\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Page />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}