{"version":3,"sources":["atoms/email-chips/index.js","molecules/emails-input-component/index.js","atoms/button/index.js","organisms/page-component/index.js","App.js","index.js"],"names":["blockName","EmailChips","props","className","email","isInValid","emailId","onClick","removeEmail","id","EmailsInput","document","getElementById","focus","emailsToRender","map","i","key","onKeyDown","e","target","value","includes","test","trim","updateEmailsList","autoComplete","type","name","placeholder","Button","handleClick","extraClass","title","Page","state","emailsList","addRandomEmail","setState","Math","random","toString","substring","filter","showAlert","alert","length","this","Component","App","ReactDOM","render","StrictMode"],"mappings":"+UAGMA,G,MAAY,cAEH,SAASC,EAAWC,GAI/B,OACI,0BAAMC,UAAWD,EAAME,MAAMC,UAAZ,UAA2BL,EAA3B,mBAAwDA,GACpEE,EAAME,MAAME,QACb,0BAAMC,QANI,WACdL,EAAMM,YAAYN,EAAME,MAAME,UAKEG,GAAE,UAAKT,EAAL,gBAA8BG,UAAS,UAAKH,EAAL,iBAArE,M,UCRNA,EAAY,cACH,SAASU,EAAaR,GA4B7B,OACI,yBAAKK,QAnBI,WACbI,SAASC,eAAT,UAA2BZ,EAA3B,iBAAoDa,SAkBtBJ,GAAIT,EAAWG,UAAWH,GAxBpDE,EAAMY,gBAAkBZ,EAAMY,eAAeC,KAAI,SAACX,EAAOY,GAAR,OAAc,kBAACf,EAAD,CAAYgB,IAAKD,EAAGZ,MAAOA,EAAOI,YAAaN,EAAMM,iBA0BhH,2BACIL,UAAS,UAAKH,EAAL,WACTkB,UAnBS,SAAAC,GACrB,GAAIA,EAAEC,OAAOC,OAAS,CAAC,QAAS,MAAO,KAAKC,SAASH,EAAEF,KAAM,CACzD,IACIb,EADIiB,EAAUF,EAAEC,OAAZC,MAGJjB,EADA,kCAAkCmB,KAAKF,EAAMG,QACrC,CAAClB,QAASe,EAAMG,QAEhB,CAAClB,QAASe,EAAMG,OAAQnB,WAAW,GAE/CH,EAAMuB,iBAAiBrB,GACvBO,SAASC,eAAT,UAA2BZ,EAA3B,iBAAoDqB,MAAM,KAUlDK,aAAa,MACbC,KAAK,QACLlB,GAAE,UAAKT,EAAL,gBACF4B,KAAK,QACLC,YAAY,mB,UCxC1B7B,EAAY,SACH,SAAS8B,EAAO5B,GAC3B,OACI,4BAAQK,QAASL,EAAM6B,YAAa5B,UAAS,UAAKH,EAAL,YAAkBE,EAAM8B,WAAxB,YAAsChC,IAC9EE,EAAM+B,O,UCFbjC,EAAY,OAEGkC,E,4MAEjBC,MAAQ,CACJC,WAAY,I,EAIhBC,eAAiB,WACb,EAAKC,SAAS,CAACF,WAAW,GAAD,mBAAM,EAAKD,MAAMC,YAAjB,CAA6B,CAAC9B,QAAQ,GAAD,OAAKiC,KAAKC,SAASC,SAAS,IAAIC,UAAU,GAA1C,qB,EAIlEjB,iBAAmB,SAACrB,GAChB,EAAKkC,SAAS,CAACF,WAAW,GAAD,mBAAK,EAAKD,MAAMC,YAAhB,CAA4BhC,O,EAIzDI,YAAc,SAACF,GACX,EAAKgC,SAAS,CAACF,WAAY,EAAKD,MAAMC,WAAWO,QAAO,SAAAvC,GAAK,OAAIA,EAAME,UAAYA,Q,EAIvFsC,UAAY,WACRC,MAAM,wCAAD,OAAyC,EAAKV,MAAMC,WAAWO,QAAO,SAAAvC,GAAK,OAAwB,IAApBA,EAAMC,aAAoByC,U,4CAGlH,WACI,OACI,yBAAK3C,UAAWH,GACZ,yBAAKG,UAAS,UAAKH,EAAL,qBACV,uBAAGG,UAAS,UAAKH,EAAL,mBAAZ,SAAkD,0BAAMG,UAAS,UAAKH,EAAL,yBAAf,iBAAlD,eACA,kBAACU,EAAD,CAAaI,eAAgBiC,KAAKZ,MAAMC,WAAYX,iBAAkBsB,KAAKtB,iBAAkBjB,YAAauC,KAAKvC,eAEnH,yBAAKL,UAAS,UAAKH,EAAL,oBACV,kBAAC8B,EAAD,CAAQC,YAAagB,KAAKV,eAAgBJ,MAAO,cACjD,kBAACH,EAAD,CAAQC,YAAagB,KAAKH,UAAWX,MAAO,2B,GAnC9Be,a,MCKnBC,MARf,WACE,OACE,yBAAK9C,UAAU,OACb,kBAAC,EAAD,Q,MCDN+C,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFzC,SAASC,eAAe,W","file":"static/js/main.df312fe5.chunk.js","sourcesContent":["import React from 'react'\r\nimport './email-chips.scss'\r\n\r\nconst blockName = 'emailChips'\r\n\r\nexport default function EmailChips(props) {\r\n    let removeEmail = () => {\r\n        props.removeEmail(props.email.emailId);\r\n    }\r\n    return (\r\n        <span className={props.email.isInValid ? `${blockName}__invalid-email` : blockName}>\r\n            {props.email.emailId}\r\n            <span onClick={removeEmail} id={`${blockName}__remove-btn`} className={`${blockName}__remove-btn`} >X</span>\r\n        </span>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport EmailChips from '../../atoms/email-chips'\r\nimport './emails-input.scss'\r\n\r\nconst blockName = 'emailsInput'\r\nexport default function EmailsInput (props) {\r\n\r\n    //Renders the Email Chips if there is a list available\r\n    let renderEmails = () => {\r\n        return (\r\n            props.emailsToRender && props.emailsToRender.map((email, i) => <EmailChips key={i} email={email} removeEmail={props.removeEmail} />)\r\n        )\r\n    }\r\n\r\n    // Focus the invisible input field on clicking the component\r\n    let focusInput = () => {\r\n        document.getElementById(`${blockName}__emai-input`).focus();\r\n    }\r\n\r\n    let handleKeyPressDown = e => {\r\n        if (e.target.value && ['Enter', 'Tab', ','].includes(e.key)) {\r\n            const { value } = e.target\r\n            let email;\r\n            if (/[\\w\\d.-]+@[\\w\\d\\.-]+\\.[\\w\\d.-]+/.test(value.trim())) {\r\n                email = {emailId: value.trim()}\r\n            } else {\r\n                email = {emailId: value.trim(), isInValid: true}\r\n            }\r\n            props.updateEmailsList(email);\r\n            document.getElementById(`${blockName}__emai-input`).value=''\r\n        }\r\n    }\r\n\r\n        return (\r\n            <div onClick={focusInput} id={blockName} className={blockName}>\r\n                {renderEmails()}\r\n                <input \r\n                    className={`${blockName}__input`} \r\n                    onKeyDown={handleKeyPressDown} \r\n                    autoComplete='off' \r\n                    type=\"email\" \r\n                    id={`${blockName}__emai-input`} \r\n                    name=\"email\" \r\n                    placeholder=\"Add people...\" \r\n                />\r\n            </div>\r\n        )\r\n}\r\n","import React from 'react'\r\nimport './button.scss'\r\n\r\nconst blockName = 'button'\r\nexport default function Button(props) {\r\n    return (\r\n        <button onClick={props.handleClick} className={`${blockName} ${props.extraClass}_${blockName}`}>\r\n            {props.title}\r\n        </button>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\nimport EmailsInput from '../../molecules/emails-input-component'\r\nimport Button from '../../atoms/button'\r\nimport './page.scss'\r\n\r\nconst blockName = 'page'\r\n\r\nexport default class Page extends Component {\r\n\r\n    state = {\r\n        emailsList: []\r\n    }\r\n\r\n    // Randomly adds an email to the list of email in\r\n    addRandomEmail = () =>  {\r\n        this.setState({emailsList: [...this.state.emailsList, {emailId: `${Math.random().toString(36).substring(7)}@random.com`}]})\r\n    }\r\n\r\n    // Update the emails list in state from the entered email in input\r\n    updateEmailsList = (email) => {\r\n        this.setState({emailsList:[...this.state.emailsList, email]});\r\n    }\r\n\r\n    // Removes the email from the list in State Object\r\n    removeEmail = (emailId) => {\r\n        this.setState({emailsList: this.state.emailsList.filter(email => email.emailId !== emailId)})\r\n    }\r\n\r\n    // Shows an alert box with the total valid emails count\r\n    showAlert = () => {\r\n        alert(`Number of Valid Emails in the List : ${this.state.emailsList.filter(email => email.isInValid !== true).length}`)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={blockName}>\r\n                <div className={`${blockName}__grey-container`}>\r\n                    <p className={`${blockName}__heading-text`}>Share <span className={`${blockName}__heading-text__bold`}>Project name </span>with others</p>\r\n                    <EmailsInput emailsToRender={this.state.emailsList} updateEmailsList={this.updateEmailsList} removeEmail={this.removeEmail} />\r\n                </div>\r\n                <div className={`${blockName}__btn-container`}>\r\n                    <Button handleClick={this.addRandomEmail} title={'Add Email'} />\r\n                    <Button handleClick={this.showAlert} title={'Get emails count'}/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React  from 'react';\nimport Page from '../src/organisms/page-component'\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Page />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}